import sys
import os

# get current script direcotry
current_dir = os.path.dirname(__file__)

# append current path to blender modules path (in order to import our own module)
if not current_dir in sys.path:
   sys.path.append(current_dir)

import bpy
from os import path
import funcs

print("\n---------------------program started---------------------\n")

# clear all default objects in the scene
funcs.clear_default()

# import model (GLTF for example)
# supported formats: OBJ, FBX, DAE, GLTF

IMPORT_MODEL = './models/mountain-gltf/model.gltf'
IMPORT_FORMAT = 'GLTF'
# IMPORT_MODEL = './models/mountain/mountain.obj'
# IMPORT_FORMAT = 'OBJ'

EXPORT_DIR = './exported/mountain'

absolute_model_path = path.abspath( path.join(current_dir, IMPORT_MODEL) )

import_result = False
if (IMPORT_FORMAT == 'GLTF'):
    import_result = funcs.import_gltf(absolute_model_path)
elif (IMPORT_FORMAT == 'OBJ'):
    import_result = funcs.import_obj(absolute_model_path)

if import_result == False:
    exit()

# join all objects into one
funcs.join_all()

# triangulate
funcs.triangulate()

# export model into GLTF format as root source
COPYRIGHT = "generated by blender-3d-tiler"
EXPORT_SELECTED = False
EXPORT_ANIMATION = False
EXPORT_LIGHT = False
EXPORT_CAMERA = False

root_model_path = path.join(path.dirname(absolute_model_path), 'root.glb')

export_result = funcs.export_gltf(
    filepath=root_model_path,
    format='GLB',
    copyright=COPYRIGHT,
    camera=EXPORT_CAMERA,
    selected=EXPORT_SELECTED,
    animation=EXPORT_ANIMATION,
    light=EXPORT_LIGHT
    )

if (export_result == False):
    exit()

# get size of mesh and textures
level = funcs.get_proper_level(root_model_path)

if (level == None):
    exit()

level = 2

all_level_tiles = []

# generate each level's tile
print("generate each level's tile")
for l in range(0, level+1):

    # clear all objects/uv_maps/images
    funcs.clear_all()

    # reload the root model
    funcs.import_gltf(root_model_path)
    root_object = bpy.data.objects[0]

    # decimate mesh
    decimate_percentage = funcs.get_decimate_percentage(l, level)
    print("decimate mesh to", str(decimate_percentage*100)+"%")
    funcs.mesh_decimate(root_object, decimate_percentage)

    # split mesh object into (2 x 2)^n sub-meshes
    tiles = funcs.tile_model(root_object, l, level)
    print("split into", len(tiles), "tiles")

    all_level_tiles.append(tiles)

    # export

print(all_level_tiles)

# refine & compress texture images

# convert gltf into b3dm & generate 3d tiles
